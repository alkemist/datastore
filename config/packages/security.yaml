security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    users:
      entity:
        # the class of the entity that represents users
        class: App\Entity\User
        # the property to query by - e.g. email, username, etc
        property: 'email'

  role_hierarchy:
    ROLE_ADMIN: [ ROLE_USER ]

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|scss|images|js)/
      security: false

    api:
      pattern: ^/api/
      custom_authenticators:
        - App\Security\ApiAuthenticator

    app:
      pattern: ^/
      lazy: true
      provider: users

      webauthn:
        authentication:
          routes:
            result_path: '/login/webauthn'
            options_path: '/login/webauthn/options'

      custom_authenticators:
        - App\Security\GoogleAuthenticator

      logout:
        path: /logout
        target: /

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/admin, roles: [ IS_AUTHENTICATED_FULLY, ROLE_ADMIN ], requires_channel: 'https' }
    - { path: ^/api/public, roles: [ PUBLIC_ACCESS ], requires_channel: 'https' }
    - { path: ^/api, roles: [ IS_AUTHENTICATED_FULLY ], requires_channel: 'https' }
    - { path: ^/logged, roles: [ IS_AUTHENTICATED_FULLY ], requires_channel: 'https' }
    - { path: ^/login,  roles: [ PUBLIC_ACCESS ], requires_channel: 'https' }
    - { path: ^/, roles: [ PUBLIC_ACCESS ], requires_channel: 'https' }

when@dev:
  security:
    firewalls:
      app:
        webauthn:
          secured_rp_ids:
            - 'localhost'

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
